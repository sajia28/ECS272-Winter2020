As was claimed in our proposal, we completed the UI interface, dataset, and masking script by March 2nd.


Dataset

We manually created a dataset with 6 features and 600 data samples. Each data sample represents a used item that is being sold on Amazon. The 6 features are the used items' category, general name, technical name that is listed on Amazon, offered price, weight, paid disposal options, and free disposal methods. An item belongs to one of 3 categories: electronics, sports equipment, or furniture. Each category possesses 10 unique items. An item is considered unique when it has a unique general name. Each unique item has 20 data samples associated with it. In other words, 20 data samples have the same general name for each general name. This means that each category has 200 data samples.

Every feature except for the paid and free disposal options was extracted from listings in Amazon. Information on paid and free disposal options was gathered from various other websites. Each disposal options entry is a comma separated list of disposal options that is sorted in descending order of recommendation. In other words, the first list element is the disposal option that is most strongly recommended by us.  We recommend one disposal option over the other if it lets the user save more money or if it offers more convenience to the user. For example, we recommend curbside collection services over dumpster rentals when the item is generally small since curbside collection services are more inclined to accept small objects and the vast majority of people already pay for curbside collection. If a disposal option is not available to a specific item, then it is not included in the list. Note that we separate free disposal options from paid disposal options. This is because paid disposal options generally offer more convenience than free disposal options, but free disposal options allow the user to save or earn money. It is up to the user to determine which one bests suits them.

Masking Script


We wrote a masking script that uses the Mask R-CNN method of detecting objects in an image to identify items in the image. Depending on the UI view selected, the segmentation mask differs- in the category view, items in the same category are masked with the same color and all items' masks have the same opacity; in the price view, all items are yellow in color but opacity differs based on price(dark-is-more); in the weight view, all items are red but opacity differs based on weight(dark-is-more). The function is given the image source, the color-to-category dictionary, the item-to-price-range and item-to-weight-range dictionary and the view as parameters, and it computes the mask on a copy of the original image and saves the image as a jpg file on disk. This code is based on an example from Adrian Rosebrock. While our code introduces several key features needed to make our application, such as changing opacity, differing color schemes based on price and weight, and the ability to add and take away categories, some of the code, namely importing the model and extracting the bounding boxes, is taken from the example.

UI

We have created a cross-platform GUI application that allows user interaction to specify the input images, the parameters of the masking algorithm, the visualization view, parameters of the visualization, and embedded interaction within the visualizations. While the GUI is functional now, it does not connect to the backend masking scripts, and therefor does not provide the visualizations at the moment. The next steps will be interfacing the backend scripts with the front end, and testing both the embedded and widget based interactions.
